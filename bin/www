#!/usr/bin/env node

// const http = require('http')
const path = require('path')
const https = require('https')
const fs = require('fs')
const debug = require('debug')('app:server')
const app = require('../app')
const config = require('../config')

const port = config.httpsPort

app.set('port', port)

const options = {
  key: fs.readFileSync(path.join(__dirname, '../ssl/private.key')),
  cert: fs.readFileSync(path.join(__dirname, '../ssl/certificate.pem'))
}

const server = https.createServer(options, app)

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

const io = require('socket.io')(server)
require('../socket')(io)

/**
 * Event listener for HTTP server 'error' event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */
function onListening() {
  debug(`env is ${config.env}`)
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('listening on ' + bind)
  // debug(`listening on ${config.host}:${config.port}`)
}
